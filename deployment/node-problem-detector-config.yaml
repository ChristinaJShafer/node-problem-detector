apiVersion: v1
data:
  kernel-monitor.json: |
    {
        "plugin": "kmsg",
        "logPath": "/dev/kmsg",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "kernel-monitor",
        "conditions": [
            {
                "type": "KernelDeadlock",
                "reason": "KernelHasNoDeadlock",
                "message": "kernel has no deadlock"
            },
            {
                "type": "ReadonlyFilesystem",
                "reason": "FilesystemIsNotReadOnly",
                "message": "Filesystem is not read-only"
            }
        ],
        "rules": [
            {
                "type": "temporary",
                "reason": "OOMKilling",
                "pattern": "Kill process \\d+ (.+) score \\d+ or sacrifice child\\nKilled process \\d+ (.+) total-vm:\\d+kB, anon-rss:\\d+kB, file-rss:\\d+kB.*"
            },
            {
                "type": "temporary",
                "reason": "TaskHung",
                "pattern": "task \\S+:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "temporary",
                "reason": "UnregisterNetDevice",
                "pattern": "unregister_netdevice: waiting for \\w+ to become free. Usage count = \\d+"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "BUG: unable to handle kernel NULL pointer dereference at .*"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "divide error: 0000 \\[#\\d+\\] SMP"
            },
            {
    			"type": "temporary",
    			"reason": "MemoryReadError",
    			"pattern": "CE memory read error .*"
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "AUFSUmountHung",
                "pattern": "task umount\\.aufs:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "DockerHung",
                "pattern": "task docker:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "ReadonlyFilesystem",
                "reason": "FilesystemIsReadOnly",
                "pattern": "Remounting filesystem read-only"
            }
        ]
    }
  docker-monitor.json: |
    {
        "plugin": "journald",
        "pluginConfig": {
            "source": "dockerd"
        },
        "logPath": "/var/log/journal",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "docker-monitor",
        "conditions": [],
        "rules": [
            {
                "type": "temporary",
                "reason": "CorruptDockerImage",
                "pattern": "Error trying v2 registry: failed to register layer: rename /var/lib/docker/image/(.+) /var/lib/docker/image/(.+): directory not empty.*"
            }
        ]
    }
  custom-scheduledevents-plugin-monitor.json: | 
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "60s",
            "timeout": "5s",
            "max_output_length": 80,
            "concurrency": 3,
            "enable_message_change_based_condition_update": true
        },
        "source": "custom-scheduledevents-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMFreezeEventScheduled",
                "reason": "NoVMFreezeEventScheduled",
                "message": "VM has no scheduled Freeze event"
            },
            {
                 "type": "VMRebootEventScheduled",
                 "reason": "NoVMRebootEventScheduled",
                 "message": "VM has no scheduled Reboot event"
            },
            {
                 "type": "VMRedeployEventScheduled",
                  "reason": "NoVMRedeployEventScheduled",
                 "message": "VM has no scheduled Redeploy event"
            },
            {
                "type": "VMTerminateEventScheduled",
                "reason": "NoVMTerminateEventScheduled",
                "message": "VM has no scheduled Terminate event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMFreezeEventScheduled",
                "reason": "VMFreezeEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Freeze",
                "timeout": "30s"
            },
            {
                "type": "permanent",
                "condition": "VMRebootEventScheduled",
                "reason": "VMRebootEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Reboot",
                "timeout": "30s"
            },
            {
                "type": "permanent",
                "condition": "VMRedeployEventScheduled",
                "reason": "VMRedeployEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Redeploy",
                "timeout": "30s"
            },
            {
                "type": "permanent",
                "condition": "VMTerminateEventScheduled",
                "reason": "VMTerminateEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Terminate",
                "timeout": "30s"
            }
        ]
    }
  custom-scheduledevents-preempt-plugin-monitor.json: |
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "1s",
            "timeout": "5s",
            "max_output_length": 80,
            "concurrency": 1,
            "enable_message_change_based_condition_update": false
    },
        "source": "custom-scheduledevents-preempt-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMPreemptEventScheduled",
                "reason": "NoVMPreemptEventScheduled",
                "message": "VM has no scheduled Preempt event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMPreemptEventScheduled",
                "reason": "VMPreemptEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Preempt",
                "timeout": "5s"
            }
        ]
    }
kind: ConfigMap
metadata:
  name: node-problem-detector-config
  namespace: kube-system
