apiVersion: v1
data:
  kernel-monitor.json: |
    {
        "plugin": "kmsg",
        "logPath": "/dev/kmsg",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "kernel-monitor",
        "conditions": [
            {
                "type": "KernelDeadlock",
                "reason": "KernelHasNoDeadlock",
                "message": "kernel has no deadlock"
            },
            {
                "type": "ReadonlyFilesystem",
                "reason": "FilesystemIsNotReadOnly",
                "message": "Filesystem is not read-only"
            }
        ],
        "rules": [
            {
                "type": "temporary",
                "reason": "OOMKilling",
                "pattern": "Kill process \\d+ (.+) score \\d+ or sacrifice child\\nKilled process \\d+ (.+) total-vm:\\d+kB, anon-rss:\\d+kB, file-rss:\\d+kB.*"
            },
            {
                "type": "temporary",
                "reason": "TaskHung",
                "pattern": "task \\S+:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "temporary",
                "reason": "UnregisterNetDevice",
                "pattern": "unregister_netdevice: waiting for \\w+ to become free. Usage count = \\d+"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "BUG: unable to handle kernel NULL pointer dereference at .*"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "divide error: 0000 \\[#\\d+\\] SMP"
            },
            {
    			"type": "temporary",
    			"reason": "MemoryReadError",
    			"pattern": "CE memory read error .*"
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "AUFSUmountHung",
                "pattern": "task umount\\.aufs:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "DockerHung",
                "pattern": "task docker:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "ReadonlyFilesystem",
                "reason": "FilesystemIsReadOnly",
                "pattern": "Remounting filesystem read-only"
            }
        ]
    }
  docker-monitor.json: |
    {
        "plugin": "journald",
        "pluginConfig": {
            "source": "dockerd"
        },
        "logPath": "/var/log/journal",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "docker-monitor",
        "conditions": [],
        "rules": [
            {
                "type": "temporary",
                "reason": "CorruptDockerImage",
                "pattern": "Error trying v2 registry: failed to register layer: rename /var/lib/docker/image/(.+) /var/lib/docker/image/(.+): directory not empty.*"
            }
        ]
    }
  custom-scheduledevents-plugin-monitor.json: | 
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "60s",
            "timeout": "55s",
            "max_output_length": 80,
            "concurrency": 3,
            "enable_message_change_based_condition_update": true
        },
        "source": "custom-scheduledevents-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMFreezeEventScheduled",
                "reason": "NoVMFreezeEventScheduled",
                "message": "VM has no scheduled Freeze event"
            },
            {
                 "type": "VMRebootEventScheduled",
                 "reason": "NoVMRebootEventScheduled",
                 "message": "VM has no scheduled Reboot event"
            },
            {
                 "type": "VMRedeployEventScheduled",
                  "reason": "NoVMRedeployEventScheduled",
                 "message": "VM has no scheduled Redeploy event"
            },
            {
                "type": "VMTerminateEventScheduled",
                "reason": "NoVMTerminateEventScheduled",
                "message": "VM has no scheduled Terminate event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMFreezeEventScheduled",
                "reason": "VMFreezeEventScheduled",
                "path": "./config/plugin/check_freeze.sh",
                "timeout": "55s"
            },
            {
                "type": "permanent",
                "condition": "VMRebootEventScheduled",
                "reason": "VMRebootEventScheduled",
                "path": "./config/plugin/check_reboot.sh",
                "timeout": "55s"
            },
            {
                "type": "permanent",
                "condition": "VMRedeployEventScheduled",
                "reason": "VMRedeployEventScheduled",
                "path": "./config/plugin/check_redeploy.sh",
                "timeout": "55s"
            },
            {
                "type": "permanent",
                "condition": "VMTerminateEventScheduled",
                "reason": "VMTerminateEventScheduled",
                "path": "./config/plugin/check_terminate.sh",
                "timeout": "55s"
            }
        ]
    }
  custom-scheduledevents-preempt-plugin-monitor.json: |
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "4s",
            "timeout": "25s",
            "max_output_length": 80,
            "concurrency": 1,
            "enable_message_change_based_condition_update": false
    },
        "source": "custom-scheduledevents-preempt-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMPreemptEventScheduled",
                "reason": "NoVMPreemptEventScheduled",
                "message": "VM has no scheduled Preempt event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMPreemptEventScheduled",
                "reason": "VMPreemptEventScheduled",
                "path": "./config/plugin/check_preempt.sh",
                "timeout": "25s"
            }
        ]
    }
  check_scheduledevent.sh: |
    #!/bin/bash

    # This plugin queries the IMDS for all scheduled events and checks the response for presence of the event type passed into the plugin.
    # If event type is not currently scheduled (not in IMDS response), it returns OK.
    # If scheduled event of requested event type is found, it returns NOTOK and stdout message for nodeCondition.

    readonly OK=0
    readonly NOTOK=1
    readonly UNKNOWN=2

    IMDS_COMMAND=' curl -XGET localhost:5000'  
    # IMDS_COMMAND=' curl -H Metadata:true --noproxy "*" http://169.254.169.254/metadata/instance?api-version=2021-02-01&format=json '
    content=$($IMDS_COMMAND)

    # parse event type (t) and sleep time (s)
    while getopts 's:t:' OPTION; do
      case "$OPTION" in
        s) 
         sleep $OPTARG  #redeploy =1s, reboot = 2s, freeze = 3s
         ;;
       t)
         EVENT_TYPE="$OPTARG"    
         ;;
       ?)
         echo "You must pass flag -t <eventType> (in title case) to plugin"
         exit $UNKNOWN   #event_type not passed
      esac
    done

    #filter for requested event type with nearest NotBefore time
    case "$EVENT_TYPE" in
        "Preempt")
        eventWithCorrectType=$(echo $content | jq '[.Events[]? | {EventType,EventStatus,NotBefore}| select(.EventType=="Preempt")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Freeze")
        eventWithCorrectType=$(echo $content | jq '[.Events[]? | {EventType,EventStatus,NotBefore}| select(.EventType=="Freeze")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Reboot") 
        eventWithCorrectType=$(echo $content | jq '[.Events[]? | {EventType,EventStatus,NotBefore}| select(.EventType=="Reboot")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');; 
        "Redeploy") 
        eventWithCorrectType=$(echo $content | jq '[.Events[]? | {EventType,EventStatus,NotBefore}| select(.EventType=="Redeploy")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Terminate") 
        eventWithCorrectType=$(echo $content | jq '[.Events[]? | {EventType,EventStatus,NotBefore}| select(.EventType=="Terminate")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
    esac
   
    # verify query connected
    if [ $? -ne 0 ]; then
        echo "IMDS query failed"
        exit $UNKNOWN
    fi

    #if no scheduled events of requested type are found, return OK 
    length=$(echo "$eventWithCorrectType" | jq length)
    if [ $length -eq 0 ]; then
    echo "No VM $EVENT_TYPE scheduled event"
    exit $OK
    fi

    # capture EventType,EventStatus,EventNotBefore 
    ev_type=$(echo "$eventWithCorrectType" | jq -r '[.[].EventType][0]')
    ev_status=$(echo "$eventWithCorrectType" | jq -r '[.[].EventStatus][0]')
    ev_notbefore=$(echo "$eventWithCorrectType" | jq -r '[.[].NotBefore][0]')

    # Output and result when requested event type is scheduled 
    if [ "$ev_type" = "$EVENT_TYPE" ]; then
    echo $ev_status ":" $ev_notbefore
    exit $NOTOK
    else
    exit $OK
    fi
  check_freeze.sh: |
    #!/bin/bash
    check_event= $( echo ./config/plugin/check_scheduledevent.sh -t Freeze -s 3)
    exit $?
  check_preempt.sh: |
    #!/bin/bash
    check_event= $( echo ./config/plugin/check_scheduledevent.sh -t Preempt)
    exit $?
  check_reboot.sh: |
    #!/bin/bash
    check_event= $( echo ./config/plugin/check_scheduledevent.sh -t Reboot -s 2)
    exit $?
  check_redeploy.sh: |
    #!/bin/bash
    check_event= $( echo ./config/plugin/check_scheduledevent.sh -t Redeploy -s 1)
    exit $?
  check_terminate.sh: |
    #!/bin/bash
    check_event= $( echo ./config/plugin/check_scheduledevent.sh -t Terminate)
    exit $?
  fakeData.yaml: |
    DocumentIncarnation: IncarnationID
    Events:
    - Description: Event Description
        EventID: Event 89
        EventSource: Platform
        EventStatus: Scheduled
        EventType: Freeze
        NotBefore: Thu, 24 Jun 2021 00:30:45 GMT
        ResourceType: VirtualMachine
        Resources:
        - resouce1
        - resource2
    - Description: Event Description
        EventID: Event 80
        EventSource: Platform
        EventStatus: Scheduled
        EventType: Preempt
        NotBefore: Thu, 24 Jun 2021 00:30:45 GMT
        ResourceType: VirtualMachine
        Resources:
        - resouce1
        - resource2
    - Description: Event Description
        EventID: Event 71
        EventSource: Platform
        EventStatus: Scheduled
        EventType: Reboot
        NotBefore: Thu, 24 Jun 2021 00:30:45 GMT
        ResourceType: VirtualMachine
        Resources:
        - resouce1
        - resource2
    - Description: Event Description
        EventID: Event 32
        EventSource: Platform
        EventStatus: Scheduled
        EventType: Redeploy
        NotBefore: Thu, 24 Jun 2021 00:30:45 GMT
        ResourceType: VirtualMachine
        Resources:
        - resouce1
        - resource2
    - Description: Event Description
        EventID: Event 14
        EventSource: Platform
        EventStatus: Scheduled
        EventType: Terminate
        NotBefore: Thu, 24 Jun 2021 00:30:45 GMT
        ResourceType: VirtualMachine
        Resources:
        - resouce1
        - resource2
  main.py: |
    from flask import Flask, request
    from datetime import datetime,timedelta
    import random
    import json
    import yaml

    app = Flask(__name__)

    @app.route("/")
    def hello():
        with open("fakeData.yaml", "r") as yamlfile:
            data=yaml.load(yamlfile, Loader=yaml.FullLoader)
            print("yaml read successful")
        event_json = json.dumps(data)
        return event_json

    @app.route('/metadata/scheduledevents', methods=['POST'])
    def hello2():
        if request.method == 'POST':

            data = request.get_json(force=True)

            print('Data Received: "{data}"'.format(data=data))
            return data
        return 444

    if __name__ == "__main__":
        app.run(host='0.0.0.0')
  fakeIMDS.sh: |
    #!/usr/bin/env python3

    import argparse
    import random
    import json
    import yaml
    import sys
    from datetime import datetime,timedelta

    parser = argparse.ArgumentParser()
    parser.add_argument("EventType")
    parser.add_argument("EventStatus")
    args = parser.parse_args()

    nowPlusTwenty=datetime.utcnow() + timedelta(minutes=20) + timedelta(days=1)
    event_dict=dict()
    scheduledEvent_dict=dict()
    scheduledEvent_dict["DocumentIncarnation"]="IncarnationID"
    type_list=["Freeze","Preempt","Reboot","Redeploy","Terminate"]

    def createRandomDict(): 
        new_event=dict()
        randomTime=datetime.utcnow() + timedelta(minutes=random.randint(5,45))
        new_event["EventID"]="Event " +str(random.randint(1, 100))
        new_event["EventType"] = type_list[random.randint(0, 4)]
        new_event["ResourceType"]="VirtualMachine"
        new_event["Resources"]=["resouce1","resource2"]
        new_event["EventStatus"] = "Scheduled"
        new_event["NotBefore"] = randomTime.strftime("%a, %d %b %Y %H:%M:%S GMT")
        new_event["Description"] = "Event Description"
        new_event["EventSource"] = "Platform"
        return new_event

    def createTypeDict(event_type): 
        new_event=dict()
        new_event["EventID"]="Event " +str(random.randint(1, 100))
        new_event["EventType"] = event_type
        new_event["ResourceType"]="VirtualMachine"
        new_event["Resources"]=["resouce1","resource2"]
        new_event["EventStatus"] = args.EventStatus
        new_event["NotBefore"] = nowPlusTwenty.strftime("%a, %d %b %Y %H:%M:%S GMT")
        if (args.EventStatus=="Started"): new_event["NotBefore"]=datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT")
        new_event["Description"] = "Event Description"
        new_event["EventSource"] = "Platform"
        return new_event

    if (args.EventType in ('All','all')):
        event_dict_list=[]
        for type in type_list:
            event_dict_list.append(createTypeDict(type))
        scheduledEvent_dict["Events"]=event_dict_list
    elif (args.EventType in ('Random','random')):
        scheduledEvent_dict["Events"]=[createRandomDict()]
    elif (args.EventType !="None"):
        scheduledEvent_dict["Events"]=[createTypeDict(args.EventType)]
    event_json = json.dumps(scheduledEvent_dict)
    print (event_json)
    sys.stdout.write(event_json)
    exit(0)

kind: ConfigMap
metadata:
  name: node-problem-detector-config
  namespace: kube-system
