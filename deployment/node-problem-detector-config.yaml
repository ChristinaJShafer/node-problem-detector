apiVersion: v1
data:
  kernel-monitor.json: |
    {
        "plugin": "kmsg",
        "logPath": "/dev/kmsg",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "kernel-monitor",
        "conditions": [
            {
                "type": "KernelDeadlock",
                "reason": "KernelHasNoDeadlock",
                "message": "kernel has no deadlock"
            },
            {
                "type": "ReadonlyFilesystem",
                "reason": "FilesystemIsNotReadOnly",
                "message": "Filesystem is not read-only"
            }
        ],
        "rules": [
            {
                "type": "temporary",
                "reason": "OOMKilling",
                "pattern": "Kill process \\d+ (.+) score \\d+ or sacrifice child\\nKilled process \\d+ (.+) total-vm:\\d+kB, anon-rss:\\d+kB, file-rss:\\d+kB.*"
            },
            {
                "type": "temporary",
                "reason": "TaskHung",
                "pattern": "task \\S+:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "temporary",
                "reason": "UnregisterNetDevice",
                "pattern": "unregister_netdevice: waiting for \\w+ to become free. Usage count = \\d+"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "BUG: unable to handle kernel NULL pointer dereference at .*"
            },
            {
                "type": "temporary",
                "reason": "KernelOops",
                "pattern": "divide error: 0000 \\[#\\d+\\] SMP"
            },
            {
    			"type": "temporary",
    			"reason": "MemoryReadError",
    			"pattern": "CE memory read error .*"
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "AUFSUmountHung",
                "pattern": "task umount\\.aufs:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "KernelDeadlock",
                "reason": "DockerHung",
                "pattern": "task docker:\\w+ blocked for more than \\w+ seconds\\."
            },
            {
                "type": "permanent",
                "condition": "ReadonlyFilesystem",
                "reason": "FilesystemIsReadOnly",
                "pattern": "Remounting filesystem read-only"
            }
        ]
    }
  docker-monitor.json: |
    {
        "plugin": "journald",
        "pluginConfig": {
            "source": "dockerd"
        },
        "logPath": "/var/log/journal",
        "lookback": "5m",
        "bufferSize": 10,
        "source": "docker-monitor",
        "conditions": [],
        "rules": [
            {
                "type": "temporary",
                "reason": "CorruptDockerImage",
                "pattern": "Error trying v2 registry: failed to register layer: rename /var/lib/docker/image/(.+) /var/lib/docker/image/(.+): directory not empty.*"
            }
        ]
    }
  custom-scheduledevents-plugin-monitor.json: | 
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "60s",
            "timeout": "5s",
            "max_output_length": 80,
            "concurrency": 3,
            "enable_message_change_based_condition_update": true
        },
        "source": "custom-scheduledevents-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMFreezeEventScheduled",
                "reason": "NoVMFreezeEventScheduled",
                "message": "VM has no scheduled Freeze event"
            },
            {
                 "type": "VMRebootEventScheduled",
                 "reason": "NoVMRebootEventScheduled",
                 "message": "VM has no scheduled Reboot event"
            },
            {
                 "type": "VMRedeployEventScheduled",
                  "reason": "NoVMRedeployEventScheduled",
                 "message": "VM has no scheduled Redeploy event"
            },
            {
                "type": "VMTerminateEventScheduled",
                "reason": "NoVMTerminateEventScheduled",
                "message": "VM has no scheduled Terminate event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMFreezeEventScheduled",
                "reason": "VMFreezeEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Freeze",
                "timeout": "3s"
            },
            {
                "type": "permanent",
                "condition": "VMRebootEventScheduled",
                "reason": "VMRebootEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Reboot",
                "timeout": "3s"
            },
            {
                "type": "permanent",
                "condition": "VMRedeployEventScheduled",
                "reason": "VMRedeployEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Redeploy",
                "timeout": "3s"
            },
            {
                "type": "permanent",
                "condition": "VMTerminateEventScheduled",
                "reason": "VMTerminateEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Terminate",
                "timeout": "3s"
            }
        ]
    }
  custom-scheduledevents-preempt-plugin-monitor.json: |
    {
        "plugin": "custom",
        "pluginConfig": {
            "invoke_interval": "1s",
            "timeout": "5s",
            "max_output_length": 80,
            "concurrency": 1,
            "enable_message_change_based_condition_update": false
    },
        "source": "custom-scheduledevents-preempt-plugin-monitor",
        "metricsReporting": true,
        "conditions": [
            {
                "type": "VMPreemptEventScheduled",
                "reason": "NoVMPreemptEventScheduled",
                "message": "VM has no scheduled Preempt event"
            }
        ],
        "rules": [
            {
                "type": "permanent",
                "condition": "VMPreemptEventScheduled",
                "reason": "VMPreemptEventScheduled",
                "path": "./config/plugin/check_scheduledevent.sh -t Preempt",
                "timeout": "5s"
            }
        ]
    }
  check_scheduledevent.sh: |
    #!/bin/bash

    # This plugin queries the IMDS for all scheduled events and checks the response for presence of the event type passed into the plugin.
    # If event type is not currently scheduled (not in IMDS response), it returns OK.
    # If scheduled event of requested event type is found, it returns NOTOK and stdout message for nodeCondition.

    readonly OK=0
    readonly NOTOK=1
    readonly UNKNOWN=2

    # IMDS_COMMAND='./fakeIMDS.sh $EVENT_TYPE Scheduled'
    # IMDS_COMMAND='./fakeIMDS.sh None None'
    IMDS_COMMAND='curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01"'

    # parse which event type we are looking for
    while getopts 't:' OPTION; do
        case "$OPTION" in
        t)
        EVENT_TYPE="$OPTARG"    
        ;;
        ?)
        echo "You must pass flag -t <eventType> (in title case) to plugin"
        exit $UNKNOWN   #event_type not passed
    esac
    done

    #filter for requested event type with nearest NotBefore time, add sleep time to stagger IMDS
    case "$EVENT_TYPE" in
        "Preempt")
        content=$($IMDS_COMMAND) 
        eventWithCorrectType=$(echo $content | jq '[.Events[] | {EventType,EventStatus,NotBefore}| select(.EventType=="Preempt")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Freeze")
        sleep 1
        content=$($IMDS_COMMAND) 
        eventWithCorrectType=$(echo $content | jq '[.Events[] | {EventType,EventStatus,NotBefore}| select(.EventType=="Freeze")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Reboot") 
        sleep 2
        content=$($IMDS_COMMAND)
        eventWithCorrectType=$(echo $content | jq '[.Events[] | {EventType,EventStatus,NotBefore}| select(.EventType=="Reboot")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');; 
        "Redeploy") 
        sleep 3
        content=$($IMDS_COMMAND)
        eventWithCorrectType=$(echo $content | jq '[.Events[] | {EventType,EventStatus,NotBefore}| select(.EventType=="Redeploy")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
        "Terminate") 
        sleep 4
        content=$($IMDS_COMMAND)
        eventWithCorrectType=$(echo $content | jq '[.Events[] | {EventType,EventStatus,NotBefore}| select(.EventType=="Terminate")] | sort_by(.EventStatus) | reverse | sort_by(.NotBefore)');;
    esac

    # verify query connected
    if [ $? -ne 0 ]; then
        echo "IMDS query failed"
        exit $UNKNOWN
    fi

    #if no scheduled events of requested type are found, return OK 
    length=$(echo "$eventWithCorrectType" | jq length)
    if [ $length -eq 0 ]; then
    echo "No VM $EVENT_TYPE scheduled event"
    exit $OK
    fi

    # capture EventType,EventStatus,EventNotBefore 
    ev_type=$(echo "$eventWithCorrectType" | jq -r '[.[].EventType][0]')
    ev_status=$(echo "$eventWithCorrectType" | jq -r '[.[].EventStatus][0]')
    ev_notbefore=$(echo "$eventWithCorrectType" | jq -r '[.[].NotBefore][0]')


    # Output and result when requested event type is scheduled 
    if [ "$ev_type" = "$EVENT_TYPE" ]; then
    echo $ev_status ":" $ev_notbefore
    exit $NOTOK
    else
    exit $OK
    fi

kind: ConfigMap
metadata:
  name: node-problem-detector-config
  namespace: kube-system
